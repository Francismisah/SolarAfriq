MONGODB_URI="mongodb+srv://vj1502003:vybzkartel2003@solar-afriq-api.8ioig.mongodb.net/?retryWrites=true&w=majority&appName=Solar-Afriq-API"
Port=4000
SECRET_KEY="Vybz_kartel_2003"


# SolarAfriq-API/
# ├── controllers/
# │   ├── adminController.js
# │   ├── authController.js
# │   ├── matchController.js
# │   ├── solarUserController.js
# │
# ├── middleware/
# │   ├── authenticate.js               # Ensures users are authenticated via JWT.
# │   ├── authorizeAdmin.js             # Restricts access to admin-specific routes.
# │   ├── errorHandler.js               # Centralized error handling.
# │   ├── validateId.js                 # Ensures valid MongoDB ObjectIDs.
# │   ├── validateInstallerRegistration.js  # Validates installer registration inputs.
# │   ├── validateSolarUserInput.js     # Validates solar user inputs.
# │   ├── validateUserSubmission.js     # Validates general user submissions.
# │
# ├── models/
# │   ├── installerModel.js
# │   ├── solarUserModel.js
# │
# ├── routes/
# │   ├── adminRoutes.js
# │   ├── authRoutes.js
# │   ├── matchRoutes.js
# │   ├── solarUserRoutes.js
# │
# ├── config/
# │   └── db.js                  # Optional: Contains MongoDB connection logic.
# │
# ├── utils/
# │   └── logger.js              # Optional: Custom logging setup if needed.
# │
# ├── .env                        # Environment variables.
# ├── .gitignore                  # Git ignore file.
# ├── package.json                # Node.js dependencies and scripts.
# ├── package-lock.json           # Lock file for dependencies.
# ├── server.js                   # Main application entry point.
# └── README.md                   # Documentation for the project.




To test these functionalities using Insomnia, here’s a step-by-step guide:

1. Create a Solar User
Request:
Method: POST
URL: http://localhost:4000/solar-users/create
Headers:
Content-Type: application/json
Body:
json
Copy code
{
  "name": "Jane Doe",
  "email": "jane.doe@example.com",
  "phoneNumber": "+1234567890",
  "location": "California",
  "address": "456 Solar Lane"
}
Expected Response:
Status: 201 Created
Body:
json
Copy code
{
  "message": "Solar User created and matches fetched successfully",
  "solarUser": {
    "name": "Jane Doe",
    "location": "California",
    "address": "456 Solar Lane"
  },
  "installers": [
    {
      "_id": "installer_id_1",
      "name": "Installer One",
      "email": "installer1@example.com",
      "location": "California"
    },
    {
      "_id": "installer_id_2",
      "name": "Installer Two",
      "email": "installer2@example.com",
      "location": "California"
    }
  ]
}
2. Assign Roles (Promote User to Admin)
Request:
Method: PATCH
URL: http://localhost:4000/users/assign-role/<user_id> (replace <user_id> with the Solar User’s _id)
Headers:
Authorization: Bearer <admin_token> (replace <admin_token> with an admin JWT)
Content-Type: application/json
Body:
json
Copy code
{
  "role": "admin"
}
Expected Response:
Status: 200 OK
Body:
json
Copy code
{
  "message": "User role updated successfully",
  "user": {
    "_id": "<user_id>",
    "name": "Jane Doe",
    "role": "admin"
  }
}
3. Perform Admin-Only Actions
Request:
Method: GET
URL: http://localhost:4000/admin/admin-dashboard
Headers:
Authorization: Bearer <admin_token> (use the token from the updated admin user)
Expected Response:
Status: 200 OK
Body:
json
Copy code
{
  "message": "Welcome to the admin dashboard!"
}
Testing Notes
Token Requirements:

You will need tokens for authentication.
Generate a JWT for the user role and admin role before testing. Use an endpoint like POST /auth/login if available.
Edge Cases to Try:

Try assigning an invalid role (e.g., "role": "superuser").
Access admin-dashboard without an admin token to confirm the 403 Access denied response.
Test assigning the role using a non-admin token to confirm 403 Access denied.
Insomnia Workspace Setup:

Create an Environment in Insomnia with placeholders for tokens, base URL, and user IDs for easy reuse.
Example:
json
Copy code
{
  "base_url": "http://localhost:4000",
  "admin_token": "<admin_token>",
  "user_id": "<user_id>"
}
Let me know how the testing goes or if you encounter any issues!






# all round test ******************************************************





To perform an all-round test on your application using Insomnia, follow these steps. Each test verifies specific functionality:

1. Create a Solar User
Endpoint: POST /solar-users/create
Headers:

Content-Type: application/json
Body:

json
Copy code
{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "location": "New York",
  "address": "123 Solar Street",
  "phoneNumber": "+1234567890"
}
Expected Response:

Status: 201 Created
Response: Solar user details and matched installers.
2. Fetch All Solar Users
Endpoint: GET /solar-users
Headers:

Authorization: Bearer <admin-token>
Expected Response:

Status: 200 OK
Response: List of all solar users.
3. Fetch a Single Solar User
Endpoint: GET /solar-users/:id
Replace :id with a valid Solar User ID.
Headers:

Authorization: Bearer <user-or-admin-token>
Expected Response:

Status: 200 OK
Response: Solar user details.
4. Assign Role to a User
Endpoint: PATCH /admin/assign-role/:id
Replace :id with a valid User ID.
Headers:

Authorization: Bearer <admin-token>
Body:

json
Copy code
{
  "role": "admin"
}
Expected Response:

Status: 200 OK
Response: Role updated successfully.
5. Access Admin Dashboard
Endpoint: GET /admin/admin-dashboard
Headers:

Authorization: Bearer <admin-token>
Expected Response:

Status: 200 OK
Response: Welcome to the admin dashboard.
6. Fetch Admin-Specific Data (Optional)
Endpoint: GET /admin/admin-data
Headers:

Authorization: Bearer <admin-token>
Expected Response:

Status: 200 OK
Response: Sensitive admin data.
Unauthorized Access Test:
Repeat the request with a non-admin token.

Expected Response:

Status: 403 Forbidden
Response: { "message": "Access denied. Admins only." }
7. Attempt Unauthorized Actions
Perform admin-only actions (like /admin/assign-role/:id) with a non-admin token.

Expected Response:

Status: 403 Forbidden
Response: { "message": "Access denied. Admins only." }
8. Error Handling
Test for invalid inputs or missing fields:

Omit required fields (e.g., email, name) in the /solar-users/create request.
Use an invalid role (e.g., manager) in /admin/assign-role/:id.
Expected Responses:

Status: 400 Bad Request
Response: Proper error messages.
9. Match and Save Test
Verify that matches for a Solar User are correctly saved to the database:

Check the database to confirm the Match entries exist after creating a Solar User.
10. Validate Token Expiry
Test requests with an expired or invalid token.

Expected Response:

Status: 401 Unauthorized
Response: { "message": "Invalid or expired token" }
Preparation Notes:
Ensure your database is running and seeded with sample data (Installers, Users, etc.).
Generate valid JWT tokens for Solar Users, Installers, and Admins.
Use Insomnia to send each request and analyze the responses.
Let me know if you encounter any issues during the tests!











